#!/usr/bin/env python
# -*- coding: utf-8 -*-

'''
Project Euler: Highly divisible triangular number

The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

	1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

	 1: 1
	 3: 1,3
	 6: 1,2,3,6
	10: 1,2,5,10
	15: 1,3,5,15
	21: 1,3,7,21
	28: 1,2,4,7,14,28

We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?
'''

from faktorisering import factorization
from collections import Counter
from math import log, sqrt

divisors_ = Counter()

def divisors(div):
	if divisors_[div] == 0:
		facs = factorization(div)
		divs = 1
		for key in facs:
			divs *= (facs[key]+1)
		divisors_[div] = divs
	return divisors_[div]


def triangular_divisors(limit):
	if limit < 100:
		n = int(limit/2)
	else:
		n = 2*limit
	div = divisors(n*(n+1)/2)
	while div < limit:
		n += 1
		if n % 2 == 0:
			div = divisors(n/2)*divisors(n+1)
		else:
			div = divisors(n)*divisors((n+1)/2)
	return n, div


if __name__ == '__main__':

	n, div = triangular_divisors(500)

	print 'tri(',n,') =', (n+1)*n/2
	print 'divisors = ', div
